#ncurses_status_on_top=true
set-option global ui_options ncurses_assistant=off
set-option global grepcmd "rg --column"
colorscheme nord

source "%val{config}/plugins/plug.kak/rc/plug.kak"

plug "andreyorst/fzf.kak" defer fzf %{
    set-option global fzf_grep_command rg
    set-option global fzf_file_command fd
}

plug "danr/kakoune-easymotion" config %{
    map -docstring 'easymotion' global user m ': enter-user-mode easymotion<ret>'
}

plug "alexherbo2/surround.kak" config %{
    require-module surround
    map -docstring 'surround' global user s ': enter-user-mode surround<ret>'
}

# plug "delapouite/kakoune-buffers" config %{
#     #hook global WinDisplay .* info-buffers
#     map global user b ': enter-user-mode buffers<ret>' -docstring 'buffers'
#     map global user B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
# }

plug "kak-lsp/kak-lsp" do %{
    cargo install --locked --force --path .
} config %{
    hook global WinSetOption filetype=(go) %{
        set-option window modelinefmt '{Error}%opt{lsp_diagnostic_error_count}{Default} %val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]'
        set-option window idle_timeout 250
        set-option window lsp_hover_max_lines 5
        set-option window lsp_auto_highlight_references true
        lsp-enable-window
        lsp-auto-hover-enable
        hook window BufWritePre .* lsp-formatting-sync
   }
}

plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
} config %{
    hook global WinSetOption filetype=(rust|markdown|kak|lisp|scheme|fish) expandtab
    hook global WinSetOption filetype=(makefile) noexpandtab
}

hook global WinCreate .* %{
    add-highlighter window/numbers number-lines -hlcursor
    add-highlighter window/matching show-matching
    add-highlighter window/VisibleWords regex \b(?:FIXME|TODO|XXX)\b 0:default+rb
}

#strip trailing whitespace globally
hook global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

hook global WinSetOption filetype=go %{
    set window indentwidth 0 # 0 means real tab
    set window lintcmd 'golangci-lint run'
    set window makecmd 'go build .'

    add-highlighter window/ regex 'if err != nil .*?\{.*?\}' 0:comment

    map window user o %{: grep HACK|TODO|FIXME|XXX|NOTE|^func|^var|^package|^const|^goto|^struct|^type %val{bufname} -H<ret>} -docstring "Show outline"
    noexpandtab
}

#complete with tab
hook global InsertCompletionShow .* %{
    try %{
        # this command temporarily removes cursors preceded by whitespace;
        # if there are no cursors left, it raises an error, does not
        # continue to execute the mapping commands, and the error is eaten
        # by the `try` command so no warning appears.
        execute-keys -draft 'h<a-K>\h<ret>'
        map window insert <tab> <c-n>
        map window insert <s-tab> <c-p>
        map window insert <ret> <c-o>
    }
}
hook global InsertCompletionHide .* %{
    unmap window insert <ret>
    unmap window insert <tab> <c-n>
    unmap window insert <s-tab> <c-p>
}

hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
}}

map -docstring 'space as leader'             global normal '<space>'  ','
map -docstring 'drop all but main selection' global normal 'q'        '<space>'
map -docstring 'drop main selection'         global normal '<c-q>'    '<a-space>'
map -docstring 'comment line'                global normal '#'        ': comment-line<ret>'
map -docstring 'comment block'               global normal '<a-#>'    ': comment-block<ret>'


map -docstring 'command prompt'    global user '<space>' ':'
map -docstring 'switch buffer'     global user 'b' ': buffer '
map -docstring 'play macro'        global user 'q' 'q'
map -docstring 'record macro'      global user 'Q' 'Q'
map -docstring 'fzf'               global user 'f' ': fzf-mode<ret>'
map -docstring 'lsp'               global user 'l' ': enter-user-mode lsp<ret>'
map -docstring 'new windows'       global user 'w' ': enter-user-mode window<ret>'
map -docstring 'clipboard'         global user 'y' ': enter-user-mode clipboard<ret>'
map -docstring 'toggles'           global user 't' ': enter-user-mode toggle<ret>'
map -docstring 'edit rc'           global user 'r' ': edit ~/.config/kak/kakrc<ret>'

define-command toggle-wrap -docstring "line wrapping" %{
    try %{
        add-highlighter global/wrap wrap
    } catch %{
        remove-highlighter global/wrap
    }
}
define-command toggle-whitespace -docstring "visible whitespace" %{
    try %{
        add-highlighter window/show-whitespace show-whitespaces -tab '›' -tabpad '⋅' -spc ' '
    } catch %{
        remove-highlighter window/show-whitespace
    }
}
define-command toggle-search-highlight -docstring 'search highlight' %{
    try %{
        add-highlighter global/searchhl dynregex '%reg{/}' 0:+u
    } catch %{
        remove-highlighter global/searchhl
    }
}
declare-user-mode toggle
map -docstring 'line wrap' global toggle 'w' ': toggle-wrap<ret>'
map -docstring 'show whitespace' global toggle 's' ': toggle-whitespace<ret>'

toggle-search-highlight

declare-user-mode clipboard
map -docstring 'yank to sysclipboard'             global clipboard 'y' '<a-|>pbcopy<ret>'
map -docstring 'paste (insert) from sysclipboard' global clipboard 'p' '!pbpaste<ret>'
map -docstring 'paste (append) from sysclipboard' global clipboard 'P' '<a-!>pbpaste<ret>'

    define-command fancy-term %{
    terminal fish -C "set -gx KAKOUNE_SESSION '%val{session}'; set -gx KAKOUNE_CLIENT '%val{client}'"
}

declare-user-mode window
map -docstring 'new client' global window 'w' ': new<ret>'
map -docstring 'terminal' global window 't' ': fancy-term<ret>'

define-command ide -docstring "set up ide" %{
    rename-client main
    set global jumpclient main
    new rename-client tools
    set global toolsclient tools
    fancy-term
}

define-command mkdir %{ nop %sh{ mkdir -p $(dirname $kak_buffile) } }

#surprising lightweight alternative to fzf for opening files
#define-command find -menu -params 1 -shell-script-candidates %{ fd --type f } %{ edit %arg{1} }

